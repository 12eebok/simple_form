require 'test_helper'

class ErrorTest < ActionView::TestCase

  def with_hint_for(attribute, type, options={})
    simple_form_for @user do |f|
      hint = SimpleForm::Components::Hint.new(f, attribute, type, options)
      concat(hint.generate)
      yield hint if block_given?
    end
  end

  test 'hint should not be generated by default' do
    with_hint_for(:name, :string) do |hint|
      assert hint.generate.blank?
    end
  end

  test 'hint should not be generated for hidden fields' do
    with_hint_for(:name, :hidden, :hint => 'Use with care...') do |hint|
      assert hint.generate.blank?
    end
  end

  test 'hint should be generated with input text' do
    with_hint_for(:name, :string, :hint => 'Use with care...')
    assert_select 'span.hint', 'Use with care...'
  end

  test 'hint should use i18n with model and attribute to lookup translation' do
    store_translations(:en, :simple_form => { :hints => { :user => { :name =>
      'Content of this input will be capitalized...'
    } } }) do
      with_hint_for(:name, :string)
      assert_select 'span.hint', 'Content of this input will be capitalized...'
    end
  end

  test 'hint should use i18n just with attribute to lookup translation' do
    store_translations(:en, :simple_form => { :hints => { :name =>
      'Content of this input will be downcased...'
    } }) do
      with_hint_for(:name, :string)
      assert_select 'span.hint', 'Content of this input will be downcased...'
    end
  end

end
